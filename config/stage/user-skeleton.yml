#cloud-config
merge_how:
  - name: list
    settings:
      - append
  - name: dict
    settings:
      - no_replace
      - recurse_list

write_files:
  - path: /etc/skel/.bash_profile
    content: |
      [[ -f /etc/bash.bashrc ]] && source /etc/bash.bashrc

      [[ -f ~/.bashrc ]] && source ~/.bashrc
    owner: "root:root"
    permissions: "0644"
  - path: /etc/skel/.bashrc
    content: |
      # general global definitions
      export EDITOR=nano
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      export WINEPREFIX="$HOME/.local/wine"
      export WINEDEBUG=fixme-all,warn-all,err-all

      # append dotnet tools to user paths
      if ! [[ "$PATH" =~ ":$HOME/.dotnet/tools" ]]; then
        export PATH="$PATH:$HOME/.dotnet/tools"
      fi

      # append local bin to user paths
      if ! [[ "$PATH" =~ ":$HOME/.local/bin" ]]; then
        export PATH="$PATH:$HOME/.local/bin"
      fi

      # append sbin to user paths #1
      if ! [[ "$PATH" =~ ":/sbin" ]]; then
        export PATH="$PATH:/sbin"
      fi

      # append sbin to user paths #2
      if ! [[ "$PATH" =~ ":/usr/sbin" ]]; then
        export PATH="$PATH:/usr/sbin"
      fi

      # append sbin to user paths #3
      if ! [[ "$PATH" =~ ":/usr/local/sbin" ]]; then
        export PATH="$PATH:/usr/local/sbin"
      fi

      # include XDG homedirs
      if [ -f "$HOME/.config/user-dirs.dirs" ]; then
        source "$HOME/.config/user-dirs.dirs"
      fi

      function fasthash() {
        if test -n "$1"; then
          # parameter(s) given
          while (( "$#" )); do
            if [ -d "$1" ]; then
              # is directory
              echo -e "$(find "$1" -type f -xtype f -print0 \
                | sort -z | xargs -0 -I {} pv {} | gzip -c \
                | tail -c8 | od -t x4 -N 4 -A n \
                | xargs)\t$(realpath "$1")/*"
            elif [ -f "$1" ]; then
              # is file
              echo -e "$(pv "$1" \
                | gzip -c | tail -c8 | od -t x4 -N 4 -A n \
                | xargs)\t$(realpath "$1")"
            else
              # is string
              echo -e "$(echo -en "$1" \
                | gzip -c | tail -c8 | od -t x4 -N 4 -A n \
                | xargs)\t\"$(printf "%q" "$1")\""
            fi
            shift
          done
        elif test ! -t 0; then
          # read from stdin
          echo -e "$(cat - | pv \
            | gzip -c | tail -c8 | od -t x4 -N 4 -A n \
            | xargs)\t-"
        else
          echo "no data" 1>&2
        fi
      }
      export -f fasthash

      # alias and color stuff
      function ls() {
          command ls --color=auto "$@"
      }
      export -f ls

      function ll() {
          command ls -l --color=auto "$@"
      }
      export -f ll

      function la() {
          command ls -la --color=auto "$@"
      }
      export -f la

      function diff() {
          command diff --color=auto "$@"
      }
      export -f diff

      function grep() {
          command grep --color=auto "$@"
      }
      export -f grep

      function ip() {
          command ip -color=auto "$@"
      }
      export -f ip

      function cifscopy() {
          command rsync -rtvus --size-only --stats --no-links --progress "$@"
      }
      export -f cifscopy

      function du() {
          command ncdu "$@"
      }
      export -f du

      function passwdgen() {
          # more than 50 bits of entropy
          command xkcdpass -w ger-anlx -R -D '1234567890' -v '[A-Xa-x]' --min=4 --max=8 -n 4 "$@"
      }
      export -f du

      ps1_pwr_sply_bat() {
        if [ -e /sys/class/power_supply/BAT0/present ] && [ "x$(</sys/class/power_supply/BAT0/status)" = "xDischarging" ]; then
          echo "$(</sys/class/power_supply/BAT0/capacity)% "
        fi
      }
      ps1_ssh_host() {
        if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [[ "$(ps -o comm= -p "$PPID")" =~ sshd ]]; then
          echo "@$HOSTNAME"
        fi
      }
      ps1_wrk_dir() {
        sed -e 's|\([^/]\)[^/]*/|\1/|g' <<<"${PWD/#$HOME/\~}"
      }
      ps1_err_code() {
        ps1_err_txt="${PIPESTATUS[-1]#0}"
        sed -e 's/\(..*\)$/ \1 /' <<<"$ps1_err_txt"
      }
      if [ $(id -u) -eq 0 ]; then
        PS1='\[\e[;31m\][$(eval "ps1_pwr_sply_bat")\u$(eval "ps1_ssh_host") $(eval "ps1_wrk_dir")]\[\e[1;37;41m\]$(eval "ps1_err_code")\[\e[;31m\]\$\[\e[m\] '
      else
        PS1='\[\e[;32m\][$(eval "ps1_pwr_sply_bat")\u$(eval "ps1_ssh_host") $(eval "ps1_wrk_dir")]\[\e[1;37;41m\]$(eval "ps1_err_code")\[\e[;32m\]\$\[\e[m\] '
      fi
    owner: "root:root"
    permissions: "0644"
  - path: /etc/skel/.inputrc
    content: |
      set enable-keypad on
    owner: "root:root"
    permissions: "0644"
  - path: /etc/skel/.config/htop/htoprc
    content: |
      # Beware! This file is rewritten by htop when settings are changed in the interface.
      # The parser is also very primitive, and not human-friendly.
      fields=0 48 17 18 38 39 40 2 46 47 49 1
      sort_key=46
      sort_direction=1
      tree_sort_key=48
      tree_sort_direction=1
      hide_kernel_threads=1
      hide_userland_threads=1
      shadow_other_users=1
      show_thread_names=0
      show_program_path=1
      highlight_base_name=0
      highlight_megabytes=1
      highlight_threads=1
      highlight_changes=0
      highlight_changes_delay_secs=5
      find_comm_in_cmdline=1
      strip_exe_from_cmdline=1
      show_merged_command=0
      tree_view=1
      tree_view_always_by_pid=0
      header_margin=1
      detailed_cpu_time=0
      cpu_count_from_one=1
      show_cpu_usage=1
      show_cpu_frequency=0
      show_cpu_temperature=0
      degree_fahrenheit=0
      update_process_names=0
      account_guest_in_cpu_meter=0
      color_scheme=1
      enable_mouse=1
      delay=15
      left_meters=AllCPUs Memory Swap
      left_meter_modes=1 1 1
      right_meters=Tasks LoadAverage Uptime
      right_meter_modes=2 2 2
      hide_function_bar=0
    owner: "root:root"
    permissions: "0644"
  - path: /etc/skel/.config/lazygit/config.yml
    content: |
      git:
        merging:
          args: "--ff-only --autostash"
        log:
          showGraph: always
        branchLogCmd: "git log --graph --all --color=always --decorate --date=relative --oneline {{branchName}} --"
      customCommands:
        - key: '<c-r>'
          context: 'localBranches'
          command: "git rebase --committer-date-is-author-date --ignore-date {{.SelectedLocalBranch.Name | quote}}"
          description: 'Rebase branch on selected branch ignoring commit and author dates'
          prompts:
            - type: 'confirm'
              title: 'Ignore commit and author dates'
              body: 'Reset all dates while rebasing {{.CheckedOutBranch.Name | quote}} on branch {{.SelectedLocalBranch.Name | quote}}?'
    owner: "root:root"
    permissions: "0644"
  - path: /etc/skel/.config/tmux/tmux.conf
    content: |
      set -a terminal-features "screen-256color:RGB"
      set -g mouse on

      set -g base-index 1
      set -g pane-base-index 1
      set -g renumber-windows on

      set -g prefix C-b
      set -g prefix2 none

      set -g mode-keys vi
      set -g status-position top
      set -g status-justify absolute-centre
      set -g status-style bg=colour235
      set -g pane-border-style fg=colour235
      set -g pane-active-border-style fg=colour250
      set -g window-status-current-style "fg=blue bold"
      set -g status-left-length 80
      set -g status-left "tmux"
      set -g status-right-length 80
      set -g status-right "#{?client_prefix,#[reverse]<Prefix>#[noreverse] ,}[#S]"
      
      # reload config
      unbind r
      bind r source-file "~/.config/tmux/tmux.conf"

      # resize slow
      unbind C-Left
      unbind C-Down
      unbind C-Up
      unbind C-Right
      bind -r C-Left  resize-pane -L 2
      bind -r C-Down  resize-pane -L 2
      bind -r C-Up    resize-pane -L 2
      bind -r C-Right resize-pane -L 2

      # resize fast
      unbind M-Left
      unbind M-Down
      unbind M-Up
      unbind M-Right
      bind -r M-Left  resize-pane -L 5
      bind -r M-Down  resize-pane -L 5
      bind -r M-Up    resize-pane -L 5
      bind -r M-Right resize-pane -L 5
      
      # Mouse menu behavior
      # Window tab menu
      bind -n MouseDown3Status display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y S \
        "Swap Left"                         l "swap-window -t:-1"                                  \
        "Swap Right"                        r "swap-window -t:+1"                                  \
        "#{?pane_marked_set,,-}Swap Marked" s swap-window                                          \
        ""                                                                                         \
        Kill                                X kill-window                                          \
        Respawn                             R "respawn-window -k"                                  \
        "#{?pane_marked,Unmark,Mark}"       m "select-pane -m"                                     \
        Rename                              n "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
        ""                                                                                         \
        "New After"                         w "new-window -a"                                      \
        "New At End"                        W new-window
      
      # Window status left menu
      bind -n MouseDown3StatusLeft display-menu -O -T "#[align=centre]#{session_name}" -t = -x M -y S \
        Next          n "switch-client -n"                                    \
        Previous      p "switch-client -p"                                    \
        ""                                                                    \
        Renumber      N "move-window -r"                                      \
        Rename        n "command-prompt -I \"#S\" \"rename-session -- '%%'\"" \
        ""                                                                    \
        "New Session" s new-session                                           \
        "New Window"  w "new-window -c \"#{pane_current_path}\""
      
      # Window status right menu
      bind -n MouseDown3StatusRight display-menu -O -T "#[align=centre]#{client_name}" -t = -x M -y S \
        Detach            d   detach-client                                                        \
        "Detach & Kill"   X   "detach-client -P"                                                   \
        "Detach Others"   o   "detach-client -a"                                                   \
        ""                                                                                         \
        "Reload config"   R   "source-file ~/.config/tmux/tmux.conf \; display-message \"Config reloaded...\"" \
        ""                                                                                         \
        Lock              l   lock-client
      
      # Pane
      # Pane menu
      bind -n MouseDown3Pane display-menu -O -T "#[align=centre] Menu (#{pane_index}) " -t = -x '#{?#{e|>:#{e|+:#{e|+:#{popup_mouse_x}, 1}, #{popup_width}}, #{client_width}}, #{e|-:#{e|-:#{popup_mouse_x}, 1}, #{popup_width}}, #{e|+:#{popup_mouse_x}, 1}}' -y '#{?#{e|>:#{e|+:#{popup_mouse_y}, #{popup_height}}, #{client_height}}, #{popup_mouse_y}, #{e|+:#{popup_mouse_y}, #{popup_height}}}' \
        "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\""     \
        "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}"       c   "run-shell -b \"tmux set-buffer -- '#{q:mouse_word}' && tmux show-buffer | timeout 1 wl-copy\"" \
        "#{?mouse_line,Copy Line,}"                                     l   "run-shell -b \"tmux set-buffer -- '#{q:mouse_line}' && tmux show-buffer | timeout 1 wl-copy\"" \
        "Paste"                                                         p   "paste-buffer"                                                     \
        ""                                                                                                                                     \
        "Horizontal Split"                                              h   "split-window -h -c \"#{pane_current_path}\""                      \
        "Vertical Split"                                                v   "split-window -v -c \"#{pane_current_path}\""                      \
        ""                                                                                                                                     \
        "Swap Up"                                                       u   "swap-pane -U"                                                     \
        "Swap Down"                                                     d   "swap-pane -D"                                                     \
        "#{?pane_marked_set,,-}Swap Marked"                             s   swap-pane                                                          \
        ""                                                                                                                                     \
        Kill                                                            X   kill-pane                                                          \
        Respawn                                                         R   "respawn-pane -k"                                                  \
        "#{?pane_marked,Unmark,Mark}"                                   m   "select-pane -m"                                                   \
        ""                                                                                                                                     \
        "#{?window_zoomed_flag,Unzoom,Zoom}"                            z   "resize-pane -Z"
    owner: "root:root"
    permissions: "0644"
